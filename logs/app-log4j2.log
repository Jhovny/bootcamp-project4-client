2022-08-26 07:46:04,363 INFO [main] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: Fetching config from server at : http://localhost:8084
2022-08-26 07:46:05,751 INFO [main] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: Located environment: name=client, profiles=[default], label=null, version=072247309c11ac5ce88a7602fc252755b6055a85, state=null
2022-08-26 07:46:05,752 INFO [main] org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/Jhovny/bootcamp-bc30-proyecto2-config-data.git/file:C:\Users\jfloresn\AppData\Local\Temp\config-repo-938787424122440036\client.yml'}]
2022-08-26 07:46:05,774 INFO [main] org.springframework.boot.SpringApplication: No active profile set, falling back to 1 default profile: "default"
2022-08-26 07:46:06,861 INFO [main] org.springframework.data.repository.config.RepositoryConfigurationDelegate: Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2022-08-26 07:46:06,963 INFO [main] org.springframework.data.repository.config.RepositoryConfigurationDelegate: Finished Spring Data repository scanning in 94 ms. Found 2 Reactive MongoDB repository interfaces.
2022-08-26 07:46:07,191 INFO [main] org.springframework.cloud.context.scope.GenericScope: BeanFactory id=7295762d-1cdd-31e4-9089-9eaecbc4d180
2022-08-26 07:46:07,235 INFO [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker: Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-08-26 07:46:07,237 INFO [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker: Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-08-26 07:46:07,238 INFO [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker: Bean 'reactorDeferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-08-26 07:46:08,874 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger: MongoClient with metadata {"driver": {"name": "mongo-java-driver|reactive-streams|spring-boot", "version": "4.6.1"}, "os": {"type": "Windows", "name": "Windows 10", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/12.0.2+10"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, streamFactoryFactory=NettyStreamFactoryFactory{eventLoopGroup=io.netty.channel.nio.NioEventLoopGroup@26fadd98, socketChannelClass=class io.netty.channel.socket.nio.NioSocketChannel, allocator=PooledByteBufAllocator(directByDefault: true), sslContext=null}, commandListeners=[io.micrometer.core.instrument.binder.mongodb.MongoMetricsCommandListener@66451058], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.Jep395RecordCodecProvider@3db6dd52]}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='30000 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, sendBufferSize=0}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, sendBufferSize=0}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[io.micrometer.core.instrument.binder.mongodb.MongoMetricsConnectionPoolListener@1e92c3b6], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, contextProvider=null}
2022-08-26 07:46:09,003 WARN [main] org.springframework.data.convert.CustomConversions: Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type; You might want to check your annotation setup at the converter implementation
2022-08-26 07:46:09,160 WARN [main] org.springframework.data.convert.CustomConversions: Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type; You might want to check your annotation setup at the converter implementation
2022-08-26 07:46:10,294 INFO [cluster-ClusterId{value='6308c0903c7290330f828298', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger: Opened connection [connectionId{localValue:1, serverValue:2}] to localhost:27017
2022-08-26 07:46:10,294 INFO [cluster-rtt-ClusterId{value='6308c0903c7290330f828298', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger: Opened connection [connectionId{localValue:2, serverValue:1}] to localhost:27017
2022-08-26 07:46:10,296 INFO [cluster-ClusterId{value='6308c0903c7290330f828298', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger: Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=17, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=79579100}
2022-08-26 07:46:11,274 INFO [main] org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver: Exposing 16 endpoint(s) beneath base path '/actuator'
2022-08-26 07:46:12,362 INFO [main] org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration: Eureka HTTP Client uses RestTemplate.
2022-08-26 07:46:12,444 WARN [main] org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger: Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2022-08-26 07:46:12,484 INFO [main] org.springframework.cloud.netflix.eureka.InstanceInfoFactory: Setting initial instance status as: STARTING
2022-08-26 07:46:12,546 INFO [main] com.netflix.discovery.DiscoveryClient: Initializing Eureka in region us-east-1
2022-08-26 07:46:12,552 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: Resolving eureka endpoints via configuration
2022-08-26 07:46:12,589 INFO [main] com.netflix.discovery.DiscoveryClient: Disable delta property : false
2022-08-26 07:46:12,589 INFO [main] com.netflix.discovery.DiscoveryClient: Single vip registry refresh property : null
2022-08-26 07:46:12,590 INFO [main] com.netflix.discovery.DiscoveryClient: Force full registry fetch : false
2022-08-26 07:46:12,590 INFO [main] com.netflix.discovery.DiscoveryClient: Application is null : false
2022-08-26 07:46:12,591 INFO [main] com.netflix.discovery.DiscoveryClient: Registered Applications size is zero : true
2022-08-26 07:46:12,591 INFO [main] com.netflix.discovery.DiscoveryClient: Application version is -1: true
2022-08-26 07:46:12,591 INFO [main] com.netflix.discovery.DiscoveryClient: Getting all instance registry info from the eureka server
2022-08-26 07:46:12,993 INFO [main] com.netflix.discovery.DiscoveryClient: The response status is 200
2022-08-26 07:46:13,004 INFO [main] com.netflix.discovery.DiscoveryClient: Starting heartbeat executor: renew interval is: 30
2022-08-26 07:46:13,008 INFO [main] com.netflix.discovery.InstanceInfoReplicator: InstanceInfoReplicator onDemand update allowed rate per min is 4
2022-08-26 07:46:13,015 INFO [main] com.netflix.discovery.DiscoveryClient: Discovery Client initialized at timestamp 1661517973014 with initial instances count: 2
2022-08-26 07:46:13,016 INFO [main] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry: Registering application CLIENT with eureka with status UP
2022-08-26 07:46:13,017 INFO [main] com.netflix.discovery.DiscoveryClient$3: Saw local status change event StatusChangeEvent [timestamp=1661517973017, current=UP, previous=STARTING]
2022-08-26 07:46:13,471 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient: DiscoveryClient_CLIENT/host.docker.internal:client:8086: registering service...
2022-08-26 07:46:13,526 INFO [main] org.springframework.boot.web.embedded.netty.NettyWebServer: Netty started on port 8086
2022-08-26 07:46:13,529 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient: DiscoveryClient_CLIENT/host.docker.internal:client:8086 - registration status: 204
2022-08-26 07:46:13,530 INFO [main] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration: Updating port to 8086
2022-08-26 07:46:19,242 INFO [main] org.springframework.boot.StartupInfoLogger: Started ClientApplication in 17.01 seconds (JVM running for 17.867)
2022-08-26 07:46:19,244 INFO [main] com.nttdata.bootcamp.client.ClientApplication: Init Project
2022-08-26 07:46:46,234 INFO [reactor-http-nio-2] com.nttdata.bootcamp.client.service.impl.ClientTypeServiceImpl: Begin FindAll ClientType
2022-08-26 07:46:46,310 INFO [nioEventLoopGroup-3-3] com.mongodb.diagnostics.logging.SLF4JLogger: Opened connection [connectionId{localValue:3, serverValue:3}] to localhost:27017
2022-08-26 07:46:46,395 INFO [nioEventLoopGroup-3-3] com.nttdata.bootcamp.client.service.impl.ClientTypeServiceImpl: ClientType(id=62f0041b4bc4aa2974139c13, code=PER, name=PERSONAL, state=true)
2022-08-26 07:46:46,396 INFO [nioEventLoopGroup-3-3] com.nttdata.bootcamp.client.service.impl.ClientTypeServiceImpl: ClientType(id=62f004314bc4aa2974139c14, code=EMP, name=EMPRESARIAL, state=true)
2022-08-26 07:46:46,409 INFO [nioEventLoopGroup-3-3] com.nttdata.bootcamp.client.service.impl.ClientTypeServiceImpl: Finish FindAll ClientType
